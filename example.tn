>> This is a comment
>> num is type for all the number types (float, int etc..)

num alpha = 1e-3;
num beta = 32; 
num tau = 13.1455;

string name = "alex";
bool is_old = true;

>> § is used to indicate if its const or not
num §pi = 3.14;

num §input_size = 2;
num §hidden_size = 3;
num §output_size = 1;

>> declaring random tensors with given sizes
tensor weights_ih = random|§hidden_size, §input_size|;
tensor bias_ih = random|§hidden_size, 1|;
tensor weights_ho = random|§output_size, §hidden_size|;
tensor bias_ho = random|§output_size, 1|;

>> without random it will declare tensor with zeros
tensor sample_input = |2|;
sample_input[0] = 1;

>> now sample_input is a one dimensional tensor with values 1, 0
>> @ -> takes dot product

>> simple function
tensor mlp(weights, bias, input) do
    tensor out = weights @ input;
    out = out + bias;
    return out;
stop;

num divide(x, y) do
    try do
        return x / y;
    stop except do
        print "cant divide";
    stop;
stop;

num main() do
    tensor hidden_layer_out = mlp(weights_ih, bias_ih, sample_input);
    tensor output = mlp(weights_ho, bias_ho, hidden_layer_out);

    print output;
    print ((3 + 8) ^ 55) % 2 == 0;

    if output > 0.5 or output < 1 do
        print "right answer";
    stop else do
        print "wrong answer";
    stop;
    print (3 * 3) + 2;

    while output < 0.7 do
        print output;
        output = output * random|1|;
        if (output ^ 2) + 3 > 1 do
            break;
        stop;
    stop;

    num x = 5;
    num y = 0;
    num z = divide(x,y);
    print z;

    return 0;
stop;

